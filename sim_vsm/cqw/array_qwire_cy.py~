from scipy.integrate import odeint
from scipy.special import gamma, airy, jn, jn_zeros
from numpy import *
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import matplotlib.pyplot as plt
from numpy.linalg import inv

def funcR(y, t):
	return [y[1],( ( ((l*l)/(t*t)-(k*k)) )*y[0] - (y[1]/t) )]

def func0(y, t):
	return [y[1],(-1)*l*l*y[0]]

delr = 0.01 # del r: radial grid size
del0 = 1.0	# del theta: angular grid size

m=1	# radial quantum number
l=3	# angular quantum number

Radius = 1.0
mtemp = m

X = radians(linspace(0, 360, 360.0/del0))
Y = arange(delr,Radius+delr,delr)
rows = len(X)	# angular grids
cols = len(Y)	# radial grids

M = len(Y)
N = len(X)

if(l==0):
	R0_0 = 1
	R0_1 = 0
else:
	R0_0 = 0
	R0_1 = 1

R0 = [R0_0, R0_1]
theta0_0 = 1
theta0_1 = 0
theta0 = [theta0_0, theta0_1]

k_array = linspace(0.1,20.0,1000)
m_temp = 0
t = Y
ind = 0
sign = +1

for i in range(len(k_array)):
	k = k_array[i]
	R = odeint(funcR, R0, t)
	if(R[-1][0]/abs(R[-1][0])!=sign and m_temp<m):	# checks if zero has been crossed and if m_temp<m (i.e how many zeros have been crossed)
		m_temp+=1
	elif(R[-1][0]/abs(R[-1][0])!=0 and m_temp==m):
		ind = i-2
		break
	sign = R[-1][0]/abs(R[-1][0])

k = k_array[ind]	# this seems to give more accurate k as m goes higher
R = odeint(funcR, R0, t)

t = X
theta = odeint(func0, theta0, t)

X, Y = meshgrid(X, Y)

psi = X*Y*0
psi_act = X*Y*0

for i in range(M):
	for j in range(N):
		psi[i][j] = R[i][0]*theta[j][0]

integ = cumsum(psi**2)[-1]
psi = psi/sqrt(integ)	# After normalization

######### The actual analytical solution	#########
for i in range(cols):
	for j in range(rows):
		psi_act[i,j] = jn(l,jn_zeros(l,m)[-1]*Y[i,0]/Radius)*cos(l*X[0,j])		# psi(R)*psi(0)
integ_act = cumsum(psi_act**2)[-1]
psi_act = psi_act/sqrt(integ_act)								# After normalization


#	Error Analysis
mean_err = cumsum(abs(psi-psi_act))[-1]/(cols*rows)
max_err = (psi-psi_act).max()
mean_err_per = mean_err/(psi.max())
max_err_per = max_err/(psi.max())


fig, ax = plt.subplots(subplot_kw=dict(projection='polar'))
#surf = ax.contourf(X,Y,psi,100)
surf = ax.contourf(X,Y,abs(psi-psi_act)*100/(abs(psi_act).mean()),100)
fig.colorbar(surf, shrink=0.5, aspect=10)
plt.title('Error in $\psi$ for circular quantum wire $m=1,l=3$')
plt.show()
