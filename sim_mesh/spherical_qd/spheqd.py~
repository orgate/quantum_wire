#############################################################################################################
#																											#
#	Title			:	Simulation of wave function using standard volume approach for spherical quantum do-#
#						t geometry mesh generated by Gmsh and visualized using Mayavi2						#
#	Author			:	Alfred Ajay Aureate R																#
#	Roll No			:	EE10B052																			#
#	Project guide	:	Prof. Anil Prabhakar, Dept.of Electrical Engineering, IITM							#
#	Code location	:	/DDP_codes/sim_mesh/spherical_qd/spheqd.py												#
#	Figure ref.		:	Figure 2.14(c)																		#
#	Date			:	19th May, 2015																		#
#																											#
#############################################################################################################

from fipy import *
import numpy as np
from mayavi import mlab

nx = 20
ny = nx
dx = 1./nx
dy = dx
L = dx * nx

#############################################################################################################
# generates spherical mesh																					#
#############################################################################################################
mesh = Gmsh3D('''
Point(1) = {0,0,0,0.5};

Point(2) = {1,0,0,0.5};
Point(3) = {0,1,0,0.5};
Point(4) = {-1,0,0,0.5};
Point(5) = {0,-1,0,0.5};

Circle(1) = {2,1,3};
Circle(2) = {3,1,4};
Circle(3) = {4,1,5};
Circle(4) = {5,1,2};

Line Loop(5) = {1,2,3,4};
Plane Surface(6) = {5};

Extrude {0,0,1} {
  Surface{6};}''') 													# this mesh is very coarse - only geometry is gmsh

#############################################################################################################
# generated spherical mesh																					#
#############################################################################################################
mesh = Gmsh3D('sphe.msh') 											# this mesh is very fine - meshed by gmsh
phi = CellVariable(name = "solution variable", mesh = mesh, value = 0.)
D = 1.

eq = ImplicitSourceTerm(coeff=1.) == DiffusionTerm(coeff=D)			# don't know why 1.28445 gives normalized solution, but it does!

#############################################################################################################
# setting the boundary conditions (shifted down by 1 later)													#
#############################################################################################################
valueTop = 1
valueBottom = 1
valueLeft = 1
valueRight = 1
valueExterior = 1
phi.constrain(valueExterior, mesh.exteriorFaces)

phi1 = 1-phi														# shifted down by 1 for correctness of the expected boundary conditions
phis = abs(phi1*phi1).sum()*(np.pi)*(4/3)							# normalizing (temporarily)
phi2 = phi1/np.sqrt(phis)

#############################################################################################################
# Visualizing the ground state of the spherical quantum dot using "Mayavi2"									#
#############################################################################################################
if __name__ == '__main__':
	viewer = Viewer(vars=phi2, datamin=0., datamax=0.002)
	viewer.plot()
timeStepDuration = 10 * 0.9 * dx**2 / (2 * D)
steps = 5
for step in range(steps):
	eq.solve(var=phi, dt=timeStepDuration)
	phi1 = 1-phi
	phis = abs(phi1*phi1).sum()*(np.pi)*(4/3)						# normalizing (temporarily)
	phi2 = phi1/np.sqrt(phis)
	if __name__ == '__main__':
		viewer.plot()

