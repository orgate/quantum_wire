#############################################################################################################
#																											#
#	Title			:	Simulation of wave function using standard volume approach for cubical quantum dot  #
#						geometry mesh generated by Gmsh and visualized using Mayavi2						#
#	Author			:	Alfred Ajay Aureate R																#
#	Roll No			:	EE10B052																			#
#	Project guide	:	Prof. Anil Prabhakar, Dept.of Electrical Engineering, IITM							#
#	Code location	:	/DDP_codes/sim_mesh/cube_qd/cubeqd.py												#
#	Figure ref.		:	Figure 2.14(a)																		#
#	Date			:	19th May, 2015																		#
#																											#
#############################################################################################################

from fipy import *
import numpy as np
from mayavi import mlab

nx = 20
ny = nx
dx = 1./nx
dy = dx
L = dx * nx

#############################################################################################################
# generates cubical mesh																					#
#############################################################################################################
mesh1 = Gmsh3D('''
Point(1) = {0, 0, 0, 1.0};
Point(2) = {1, 0, 0, 1.0};
Point(3) = {1, 1, 0, 1.0};
Point(4) = {1, 1, 1, 1.0};
Point(5) = {0, 1, 0, 1.0};
Point(6) = {0, 0, 1, 1.0};
Point(7) = {0, 1, 1, 1.0};
Point(8) = {1, 0, 1, 1.0};
Line(1) = {3, 4};
Line(2) = {4, 7};
Line(3) = {7, 5};
Line(4) = {5, 3};
Line(5) = {3, 2};
Line(6) = {2, 1};
Line(7) = {1, 5};
Line(8) = {7, 6};
Line(9) = {6, 8};
Line(10) = {8, 4};
Line(11) = {2, 8};
Line(12) = {1, 6};
Line Loop(13) = {11, -9, -12, -6};
Plane Surface(14) = {13};
Line Loop(15) = {5, 6, 7, 4};
Plane Surface(16) = {15};
Line Loop(17) = {7, -3, 8, -12};
Plane Surface(18) = {17};
Line Loop(19) = {4, 1, 2, 3};
Plane Surface(20) = {19};
Line Loop(21) = {5, 11, 10, -1};
Plane Surface(22) = {21};
Line Loop(23) = {10, 2, 8, 9};
Plane Surface(24) = {23};
Surface Loop(25) = {16, 22, 14, 24, 20, 18};
Volume(26) = {25};''') 												# this mesh is very coarse - only geometry is gmsh

#############################################################################################################
# generated cubical mesh																					#
#############################################################################################################
mesh = Gmsh3D('cube.msh') 											# this mesh is very fine - meshed by gmsh

phi = CellVariable(name = "solution variable", mesh = mesh, value = 0.)
D = 1.
eq = ImplicitSourceTerm(coeff=10.) == DiffusionTerm(coeff=D)		# don't know why 1.28445 gives normalized solution, but it does!

#############################################################################################################
# setting the boundary conditions (shifted down by 1 later)													#
#############################################################################################################
valueTop = 1
valueBottom = 1
valueLeft = 1
valueRight = 1
valueExterior = 1
phi.constrain(valueExterior, mesh.exteriorFaces)

phi1 = 1-phi														# shifted down by 1 for correctness of the expected boundary conditions
phis = abs(phi1*phi1).sum()											# normalizing (temporarily)
phi2 = phi1/np.sqrt(phis)

#############################################################################################################
# Visualizing the ground state of the cubical quantum dot using "Mayavi2"									#
#############################################################################################################
if __name__ == '__main__':
	viewer = Viewer(vars=phi2, datamin=0., datamax=0.001)
	viewer.plot()
timeStepDuration = 10 * 0.9 * dx**2 / (2 * D)
steps = 5
for step in range(steps):
	eq.solve(var=phi, dt=timeStepDuration)
	phi1 = 1-phi
	phis = abs(phi1*phi1).sum()										# normalizing (temporarily)
	phi2 = phi1/np.sqrt(phis)
	if __name__ == '__main__':
		viewer.plot()

